#!/bin/bash

# PBS script for Futoshiki Task Factor MPI performance testing
#PBS -N futoshiki_factor_mpi
#PBS -q short_cpuQ
#PBS -l walltime=06:00:00
# We request a good number of CPUs on a single node for the test
#PBS -l select=256:ncpus=1:mem=2gb
#PBS -l place=excl

# This script expects PUZZLE_FILE to be passed from the environment
if [ -z "$PUZZLE_FILE" ]; then
    echo "ERROR: PUZZLE_FILE environment variable not set."
    echo "Please submit this job using a wrapper or 'qsub -v PUZZLE_FILE=...'"
    exit 1
fi

# Change to submission directory
cd $PBS_O_WORKDIR

# Load modules
module load mpich-3.2

make clean
make mpi
if [ $? -ne 0 ]; then
    echo "Build failed!"
    exit 1
fi

# --- Experiment Parameters ---
# Use a fixed number of cores to isolate the 'factor' variable
MPI_PROCS_TO_TEST=256

# The list of factors to sweep through
FACTORS_TO_TEST="16.0 32.0 64.0"


# Function to run a single test and parse the time
run_test() {
    local nprocs=$1
    local factor=$2
    local puzzle=$3
    
    echo "--- Testing: mpi with N=$nprocs, Factor=$factor ---"
    
    # Use the `time` command with a format string to get just the real time
    # The output is sent to stderr, so we redirect it
    local TIMEFORMAT='%R'
    local elapsed_time
    
    elapsed_time=$( { time mpirun.actual -np "$nprocs" ./bin/futoshiki_mpi "$puzzle" -n -q -f "$factor"; } 2>&1 )
    
    # Print results in a CSV-friendly format
    echo "mpi,$nprocs,$factor,$elapsed_time"
}

# --- MPI Factor Scaling Test ---
echo "============================================"
echo "MPI Task Factor Test (Processes = $MPI_PROCS_TO_TEST)"
echo "============================================"
echo "Date: $(date)"
echo "Node: $(hostname)"
echo "Puzzle: $PUZZLE_FILE"
echo "Implementation,Processes,Factor,Time(s)"
for factor in $FACTORS_TO_TEST; do
    run_test $MPI_PROCS_TO_TEST "$factor" "$PUZZLE_FILE"
done
echo ""

echo "MPI factor testing completed at $(date)"