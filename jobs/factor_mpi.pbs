#!/bin/bash

# PBS script for Futoshiki Task Factor MPI performance testing
#PBS -N futoshiki_factor_mpi
#PBS -q short_cpuQ
#PBS -l walltime=06:00:00
# We request a good number of CPUs on a single node for the test
#PBS -l select=128:ncpus=1:mem=2gb
#PBS -l place=excl

# This script expects PUZZLE_FILE to be passed from the environment
if [ -z "$PUZZLE_FILE" ]; then
    echo "ERROR: PUZZLE_FILE environment variable not set."
    echo "Please submit this job using a wrapper or 'qsub -v PUZZLE_FILE=...'"
    exit 1
fi

# Change to submission directory
cd $PBS_O_WORKDIR

# Load modules
module load gcc91
module load mpich-3.2

# Build the MPI version
echo "Building MPI version..."
make clean
make mpi
if [ $? -ne 0 ]; then
    echo "Build failed!"
    exit 1
fi

# --- Experiment Parameters ---
# Use a fixed number of cores to isolate the 'factor' variable
MPI_PROCS_TO_TEST=128

# The list of factors to sweep through
FACTORS_TO_TEST="1.0 2.0 4.0 8.0 16.0 32.0 64.0"

# --- MPI Factor Scaling Test ---
echo ""
echo "============================================"
echo "MPI Task Factor Test (Processes = $MPI_PROCS_TO_TEST)"
echo "============================================"
echo "Job ID: $PBS_JOBID"
echo "Node: $(hostname)"
echo "Date: $(date)"
echo "Puzzle: $PUZZLE_FILE"
echo ""

for factor in $FACTORS_TO_TEST; do
    echo "--- Testing: mpi with ${MPI_PROCS_TO_TEST} processes, Factor=$factor ---"
    # The -n and -f flags are passed to the solver
    mpirun.actual -np "$MPI_PROCS_TO_TEST" ./bin/mpi "$PUZZLE_FILE" -f "$factor"
    echo ""
done

echo "MPI factor testing completed at $(date)"```
