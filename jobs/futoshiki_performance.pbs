#!/bin/bash

# PBS script for Futoshiki performance testing
#PBS -N futoshiki_perf

# Max walltime 6h
#PBS -q short_cpuQ
# Expected timespan for execution
#PBS -l walltime=06:00:00
# Chunks (~ Nodes) : Cores per chunk : Shared memory per chunk
# We request all 64 CPUs on a single node for the full scaling test
#PBS -l select=1:ncpus=64:mem=8gb
# Exclusive nodes
#PBS -l place=excl

# This script expects PUZZLE_FILE to be passed from the environment via `qsub -v`
if [ -z "$PUZZLE_FILE" ]; then
    echo "ERROR: PUZZLE_FILE environment variable not set."
    echo "Please submit this job using the submit_job.sh script."
    exit 1
fi

# Change to submission directory
cd $PBS_O_WORKDIR

# Load modules
module load openmpi-4.0.4
module load mpich-3.2

# Build all versions
echo "Building all versions..."
make clean
make all -j4

if [ ! -f bin/futoshiki_seq ] || [ ! -f bin/futoshiki_omp ] || [ ! -f bin/futoshiki_mpi ]; then
    echo "Build failed!"
    exit 1
fi

echo ""
echo "====================================="
echo "Futoshiki Performance Testing"
echo "====================================="
echo "Job ID: $PBS_JOBID"
echo "Node: $(hostname)"
echo "Date: $(date)"
echo "Puzzle: $PUZZLE_FILE"
echo ""

# Function to run a test
run_test() {
    local impl=$1
    local threads=$2
    local puzzle=$3
    
    echo "--- Testing: $impl with $threads thread(s)/process(es) ---"
    
    case $impl in
        sequential)
            ./bin/futoshiki_seq $puzzle -n
            ;;
        openmp)
            export OMP_NUM_THREADS=$threads
            export OMP_PROC_BIND=close
            export OMP_PLACES=cores
            ./bin/futoshiki_omp $puzzle -n
            ;;
        mpi)
            mpirun.actual -np $threads ./bin/futoshiki_mpi $puzzle -n
            ;;
    esac
    
    echo ""
}

# --- Run Sequential Baseline ---
echo "============================================"
echo "Sequential Baseline"
echo "============================================"
run_test sequential 1 "$PUZZLE_FILE"

# --- OpenMP Scaling Test ---
echo "============================================"
echo "OpenMP Scaling Test"
echo "============================================"
for threads in 1 2 4 8 16 32 64; do
    # Skip if threads > available cores
    if [ $threads -gt $PBS_NCPUS ]; then continue; fi
    run_test openmp $threads $PUZZLE_FILE
done

# --- MPI Scaling Test ---
echo "============================================"
echo "MPI Scaling Test (on a single node)"
echo "============================================"
for procs in 1 2 4 8 16 32 64 128; do
    # Skip if procs > available cores
    if [ $procs -gt $PBS_NCPUS ]; then continue; fi
    run_test mpi $procs $PUZZLE_FILE
done

echo "Performance testing completed at $(date)"