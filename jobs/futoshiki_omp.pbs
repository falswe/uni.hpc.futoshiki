#!/bin/bash

# PBS script for OpenMP Futoshiki solver
#PBS -N futoshiki_omp

# Max walltime 6h
#PBS -q short_cpuQ
# Expected timespan for execution
#PBS -l walltime=00:10:00
# Chunks (~ Nodes) : Cores per chunk : Shared memory per chunk
#PBS -l select=1:ncpus=64:mem=8gb
# Exclusive nodes
#PBS -l place=excl

# Change to submission directory
cd $PBS_O_WORKDIR

# Load necessary modules
module load openmpi-4.0.4

# Build
echo "Building OpenMP version..."
make clean
make openmp

if [ ! -f bin/futoshiki_omp ]; then
    echo "Build failed!"
    exit 1
fi

echo "Build successful"
echo ""

# System information
echo "======================="
echo "Futoshiki OpenMP Solver"
echo "======================="
echo "Job ID: $PBS_JOBID"
echo "Node: $(hostname)"
echo "Cores available: $(nproc)"
echo "Date: $(date)"
echo "Working directory: $PBS_O_WORKDIR"
echo ""

# OpenMP environment setup
export OMP_PROC_BIND=close
export OMP_PLACES=cores
export OMP_DISPLAY_ENV=true

# Function to run a test
run_test() {
    local threads=$1
    local puzzle=$2
    local name=$(basename $puzzle .txt)

    echo "======================================"
    echo "Test: $name with $threads threads"
    echo "======================================"

    export OMP_NUM_THREADS=$threads
    time ./bin/futoshiki_omp $puzzle
    
    echo ""
}

# Warm-up run
echo "Performing warm-up run..."
export OMP_NUM_THREADS=4
./bin/futoshiki_omp puzzles/4x4_easy.txt > /dev/null 2>&1

# Scaling tests with different process counts
for threads in 1 2 4 8 16
do
    echo "############################################"
    echo "# Testing with $threads OpenMP threads"
    echo "############################################"
    
    run_test $threads "puzzles/9x9_extreme1.txt"
done

echo ""
echo "Job completed at $(date)"
