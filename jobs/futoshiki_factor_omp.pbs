#!/bin/bash

# PBS script for Futoshiki Task Factor OpenMP performance testing
#PBS -N futoshiki_factor_omp
#PBS -q short_cpuQ
#PBS -l walltime=06:00:00
# We request a good number of CPUs on a single node for the test
#PBS -l select=1:ncpus=64:mem=2gb
#PBS -l place=excl

# This script expects PUZZLE_FILE to be passed from the environment
if [ -z "$PUZZLE_FILE" ]; then
    echo "ERROR: PUZZLE_FILE environment variable not set."
    echo "Please submit this job using a wrapper or 'qsub -v PUZZLE_FILE=...'"
    exit 1
fi

# Change to submission directory
cd $PBS_O_WORKDIR

# Load modules
module load openmpi-4.0.4

# Build the OpenMP version
echo "Building OpenMP version..."
make clean
make openmp
if [ $? -ne 0 ]; then
    echo "Build failed!"
    exit 1
fi

# --- Experiment Parameters ---
# Use a fixed number of cores to isolate the 'factor' variable
OMP_THREADS_TO_TEST=64

# The list of factors to sweep through
FACTORS_TO_TEST="1.0 2.0 4.0 8.0 16.0 32.0 64.0"

# --- OpenMP Factor Scaling Test ---
echo ""
echo "============================================"
echo "OpenMP Task Factor Test (Threads = $OMP_THREADS_TO_TEST)"
echo "============================================"
echo "Job ID: $PBS_JOBID"
echo "Node: $(hostname)"
echo "Date: $(date)"
echo "Puzzle: $PUZZLE_FILE"
echo ""

# Set OpenMP environment variables
export OMP_NUM_THREADS=$OMP_THREADS_TO_TEST
export OMP_PROC_BIND=close
export OMP_PLACES=cores

for factor in $FACTORS_TO_TEST; do
    echo "--- Testing: omp with ${OMP_THREADS_TO_TEST} threads, Factor=$factor ---"
    # The -n and -f flags are passed to the solver
    ./bin/futoshiki_omp "$PUZZLE_FILE" -n -f "$factor"
    echo ""
done

echo "OpenMP factor testing completed at $(date)"
